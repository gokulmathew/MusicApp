{"version":3,"file":"static/js/746.62ce160c.chunk.js","mappings":"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","sources":["components/Playlist/index.tsx","pages/SongsTab/ModalBox.tsx","pages/SongsTab/MenuList.tsx","pages/SongsTab/SongCard.tsx","../node_modules/@material-ui/icons/Shuffle.js"],"sourcesContent":["/* eslint-disable */\nimport React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Fab from '@material-ui/core/Fab';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport Card from '../../pages/SongsTab/SongCard';\nimport { SHUFFLE_TEXT, NO_SONGS_IN_PLAYLIST } from '../../constants';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: '30px',\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    backgroundColor: {\n        backgroundColor: 'black',\n        marginBottom: '30px'\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    }\n}));\n\n\nfunction Playlist({ location, history }:any) {\n    const classes = useStyles();\n    const [playlist, setPlaylist] = useState<any>(null)\n    const [count, setCount] = useState(0)\n\n    useEffect(() => {\n        if (location?.state) {\n            setPlaylist(location?.state)\n        } else if (localStorage?.playlist) {\n            setPlaylist(JSON.parse(localStorage?.playlist))\n        } else {\n            history.push('/')\n        }\n    }, [location.state])\n\n    const handleClick = (val:any) => {\n        let obj1 :any= playlist\n        let obj2 = val\n        obj1 = {\n            ...obj1,\n            songs: obj1.songs.filter((x:any) => x.songId !== obj2.songId),\n        };\n        localStorage.setItem(\"playlist\", JSON.stringify(obj1))\n        setPlaylist(obj1)\n    }\n\n    useEffect(() => {\n        if (playlist?.songs?.length === 0) {\n            history.push('/')\n        }\n    }, [playlist])\n\n    const shuffleArray = () => {\n        var shuffledArray = [].concat(playlist.songs);\n        shuffledArray.sort(function () {\n            return 0.5 - Math.random();\n        });\n        let shuffledPlaylist:any = playlist\n        shuffledPlaylist.songs = [...shuffledArray]\n        setCount(count => count + 1)\n        setPlaylist(shuffledPlaylist)\n    }\n\n    return (\n\n        <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.backgroundColor}>\n                <Toolbar variant=\"dense\">\n                    <Typography variant=\"h6\" color=\"inherit\" style={{textTransform:'capitalize'}}>\n                        playlist - {playlist?.name}\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <div style={{ float: 'right' }}>\n                {playlist?.songs?.length > 1 &&\n                    <Fab variant=\"extended\" onClick={shuffleArray}>\n                        <ShuffleIcon className={classes.extendedIcon} />\n                        {SHUFFLE_TEXT}\n                    </Fab>}\n            </div>\n            {playlist?.songs?.length > 0 ? <Grid container spacing={3} >\n                <Card data={playlist?.songs} showSM={false} showMenu={false} handleClick={handleClick} />\n            </Grid> : <Typography component=\"h6\" variant=\"h6\" style={{ textAlign: 'center' }}>\n                    {NO_SONGS_IN_PLAYLIST}\n                </Typography>}\n        </div>\n    )\n}\n\nPlaylist.propTypes = {\n    location: PropTypes.instanceOf(Object),\n    history: PropTypes.instanceOf(Object)\n};\n\nexport default Playlist;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport {SONGS_MODAL_TITLE,SONGS_MODAL_DESC1,SONGS_MODAL_DESC2,SONGS_MODAL_CANCEL,SONGS_MODAL_SUBMIT} from '../../constants';\n\nfunction Modal({ open, handleSubmit, handleModalClose, handlePlaylistChange, playlists, value }:any) {\n  return (\n    <React.Fragment>\n      <Dialog\n        fullWidth={true}\n        maxWidth=\"xs\"\n        open={open}\n        onClose={handleModalClose}\n        aria-labelledby=\"max-width-dialog-title\"\n      >\n        <DialogTitle id=\"max-width-dialog-title\">{SONGS_MODAL_TITLE}</DialogTitle>\n        {playlists.length > 0 ? <DialogContent>\n          <DialogContentText>\n            {SONGS_MODAL_DESC1}\n          </DialogContentText>\n          <FormControl component=\"fieldset\">\n              <RadioGroup\n                aria-label=\"playlist\"\n                name=\"playlist1\"\n                value={value}\n                onChange={(e) => handlePlaylistChange(e)}\n              >\n                {playlists.map((val:any, i:any) => (\n                  <FormControlLabel value={val?.name} key={i} control={<Radio />} label={val?.name} />\n                ))}\n              </RadioGroup>\n        </FormControl>\n\n        </DialogContent> : \n        <DialogContent>\n            <DialogContentText>\n              {SONGS_MODAL_DESC2}\n          </DialogContentText>\n          </DialogContent>}\n        <DialogActions>\n        <Button onClick={handleModalClose} color=\"primary\">\n            {SONGS_MODAL_CANCEL}\n          </Button>\n          {playlists?.length > 0 && <Button onClick={handleSubmit} color=\"primary\">\n            {SONGS_MODAL_SUBMIT}\n          </Button>}\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nModal.propTypes = {\n  value: PropTypes.string,\n  open: PropTypes.bool,\n  handleSubmit: PropTypes.func,\n  handleModalClose: PropTypes.func,\n  handlePlaylistChange: PropTypes.func,\n  playlists: PropTypes.instanceOf(Array),\n};\n\nexport default Modal;","import React,{useState,useEffect} from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { useSelector,useDispatch } from 'react-redux';\nimport { addSongToPlaylist } from '../../actions'\nimport Modal from \"./ModalBox\";\nimport { SONGS_MENU_ITEM_ADD } from \"../../constants\";\n\nconst ITEM_HEIGHT = 40;\n\nexport default function MenuList({songData}:any) {\n\n  let dispatch = useDispatch()\n  let state = useSelector((state:any) => state?.data?.playlists) \n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openModal, setOpenModal] = useState(false);\n  const [playlists,setPlaylists] = useState([])\n  const [playlist,setPlaylist] = useState();\n  const [song] = useState(songData)\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event:any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    setOpenModal(true)\n  };\n\n  const handleOutsideClickClose = () => {\n    setAnchorEl(null);\n  }\n\n  const handleModalClose = () => {\n    setOpenModal(false)\n  }\n\n  const handlePlaylistChange = (e:any) => {\n    setPlaylist(e.target.value)\n  }\n\n  const handleSubmit = () => {\n    setOpenModal(false)\n    dispatch(addSongToPlaylist(playlist,song))\n  }\n\n  useEffect(() => {\n    if(state?.length > 0){\n        setPlaylists(state)\n    }\n  }, [state])\n\n  return (\n    <div>\n      <IconButton\n        aria-label=\"more\"\n        aria-controls=\"long-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleOutsideClickClose}\n        PaperProps={{\n          style: {\n            maxHeight: ITEM_HEIGHT * 4.5,\n            width: \"20ch\"\n          }\n        }}\n      >\n        <MenuItem onClick={handleClose}>{SONGS_MENU_ITEM_ADD}</MenuItem>\n      </Menu>\n      <Modal open={openModal} handleModalClose={handleModalClose} value={playlist} handleSubmit={handleSubmit} handlePlaylistChange={handlePlaylistChange} playlists={playlists}/>\n    </div>\n  );\n}\n","import { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { red } from \"@material-ui/core/colors\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport MenuList from \"./MenuList\";\nimport { truncate } from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    border: \"1px solid white\",\n  },\n  details: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  content: {\n    flex: \"1 0 auto\",\n  },\n  cover: {\n    width: 151,\n  },\n  controls: {\n    display: \"flex\",\n    alignItems: \"center\",\n    paddingLeft: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  playIcon: {\n    height: 38,\n    width: 38,\n  },\n  avatar: {\n    backgroundColor: red[300],\n  },\n}));\n\nfunction SongsCard({ data, showSM, showMenu, handleClick }: any) {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  return (\n    <>\n      {data?.map((val: any, i: any) => (\n        <Grid item xs={12} sm={12} key={i}>\n          <Card\n            className={classes.root}\n            style={{ backgroundColor: !showMenu ? \"lightgray\" : \"white\" }}\n          >\n            <CardHeader\n              action={\n                showMenu ? (\n                  <MenuList songData={val} />\n                ) : (\n                  <IconButton onClick={() => handleClick(val)}>\n                    <CloseIcon />\n                  </IconButton>\n                )\n              }\n            />\n            <div className={classes.details}>\n              <CardContent className={classes.content}>\n                <Typography component=\"h5\" variant=\"h5\">\n                  {truncate(val?.title, 20)}\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                  {truncate(val?.title, 15)}\n                </Typography>\n              </CardContent>\n              <div className={classes.controls}>\n                <IconButton aria-label=\"previous\">\n                  {theme.direction === \"rtl\" ? (\n                    <SkipNextIcon />\n                  ) : (\n                    <SkipPreviousIcon />\n                  )}\n                </IconButton>\n                <IconButton aria-label=\"play/pause\">\n                  <PlayArrowIcon className={classes.playIcon} />\n                </IconButton>\n                <IconButton aria-label=\"next\">\n                  {theme.direction === \"rtl\" ? (\n                    <SkipPreviousIcon />\n                  ) : (\n                    <SkipNextIcon />\n                  )}\n                </IconButton>\n              </div>\n            </div>\n            <CardMedia\n              className={classes.cover}\n              image={val?.thumbnailUrl}\n              title={truncate(val?.title, 20) || \"Live from space album cover\"}\n            />\n          </Card>\n        </Grid>\n      ))}\n    </>\n  );\n}\n\nSongsCard.propTypes = {\n  showMenu: PropTypes.bool,\n  showSM: PropTypes.bool,\n  handleClick: PropTypes.func,\n  data: PropTypes.instanceOf(Array),\n};\n\nexport default SongsCard;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z\"\n}), 'Shuffle');\n\nexports.default = _default;"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginTop","menuButton","marginRight","spacing","backgroundColor","marginBottom","extendedIcon","location","history","classes","useState","playlist","setPlaylist","setCount","useEffect","state","localStorage","JSON","parse","push","songs","length","className","position","variant","color","style","textTransform","name","float","onClick","shuffledArray","concat","sort","Math","random","shuffledPlaylist","count","SHUFFLE_TEXT","container","data","showSM","showMenu","handleClick","val","obj1","obj2","filter","x","songId","setItem","stringify","component","textAlign","NO_SONGS_IN_PLAYLIST","open","handleSubmit","handleModalClose","handlePlaylistChange","playlists","value","Dialog","fullWidth","maxWidth","onClose","DialogTitle","id","SONGS_MODAL_TITLE","DialogContent","DialogContentText","SONGS_MODAL_DESC1","FormControl","RadioGroup","onChange","e","map","i","FormControlLabel","control","Radio","label","SONGS_MODAL_DESC2","DialogActions","Button","SONGS_MODAL_CANCEL","SONGS_MODAL_SUBMIT","MenuList","songData","dispatch","useDispatch","useSelector","anchorEl","setAnchorEl","openModal","setOpenModal","setPlaylists","song","Boolean","IconButton","event","currentTarget","MoreVert","Menu","keepMounted","PaperProps","maxHeight","ITEM_HEIGHT","width","MenuItem","SONGS_MENU_ITEM_ADD","addSongToPlaylist","target","display","justifyContent","border","details","flexDirection","content","flex","cover","controls","alignItems","paddingLeft","paddingBottom","playIcon","height","avatar","red","useTheme","Grid","item","xs","sm","Card","CardHeader","action","Close","CardContent","Typography","truncate","title","direction","SkipNext","SkipPrevious","PlayArrow","CardMedia","image","thumbnailUrl","_interopRequireDefault","require","_interopRequireWildcard","exports","React","_default","default","createElement","d"],"sourceRoot":""}